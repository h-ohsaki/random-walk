#!/usr/bin/env python3
#
# Run a simulation of random walk on graph under specified conditions.
# Copyright (c) 2023, Hiroyuki Ohsaki.
# All rights reserved.
#

# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# any later version.

# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.

# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <https://www.gnu.org/licenses/>.

import random
import sys

from perlcompat import die, warn, getopts
import graph_tools
import randwalk
import tbdump

def usage():
    die(f"""\
usage: {sys.argv[0]} [-s #] [-n #] [-k #]
  -s #      seed of random number generator
  -n #      the number of vertices (default: 100)
  -k #      average degree (default: 3)
  -t type   type of graph ({randwalk.GRAPH_TYPES})
  -a agent  type of agent ({randwalk.AGENT_TYPES})
  -A #      bias parameter alpha (default: 0)
""")

def dump_agent(last_v, agent, g, vertices):
    u = last_v
    v = agent.current

    # Extract subgraph around the agent.
    h = graph_tools.Graph(directed=False)
    h.add_edge(u, v)
    for w in g.neighbors(u):
        h.add_edge(u, w)
    for w in g.neighbors(v):
        h.add_edge(v, w)

    # Draw vertices.
    print("kill /^e/")
    for w in list(vertices):
        if not h.has_vertex(w):
            print(f"kill /^[vt]{w}$/")
            vertices.remove(w)
    for w in h.vertices():
        if not w in vertices:
            print(f"define v{w} ellipse 10 10 heat15")
            print(f"define t{w} text {w} 14 white")
            print(f"attach t{w} v{w}")
            vertices.add(w)

    for w1, w2 in h.edges():
        print(f"define e{w1}_{w2} link v{w1} v{w2} 2 heat15")
    # print(f"define e link v{u} v{v} 2 heat80")

    print("spring -a /^v/")
    print(f"animate v{u} .5 .75")
    print(f"animate v{v} .5 .25")
    print("animate agent .5 .75")
    print("display")
    print("move agent .5 .75")
    print("animate agent .5 .25")
    print("display")

def main():
    opt = getopts('s:n:k:t:a:A:') or usage()
    seed = int(opt.s) if opt.s else 1
    n_nodes = int(opt.n) if opt.n else 100
    kavg = float(opt.k) if opt.k else 2.5
    graph_type = opt.t if opt.t else 'random'
    agent_type = opt.a if opt.a else 'BiasedRW'
    alpha = float(opt.A) if opt.A else 0.

    random.seed(seed)
    g = randwalk.create_graph(graph_type, n_nodes, kavg)
    agent = randwalk.create_agent(agent_type, graph=g, current=1, alpha=alpha)
    # Perform an instance of simulation.
    vertices = set()
    print("define agent box 20 20 heat80")
    while agent.ncovered < n_nodes:
        last_v = agent.current
        agent.advance()
        # agent.dump()
        dump_agent(last_v, agent, g, vertices)

if __name__ == "__main__":
    main()
